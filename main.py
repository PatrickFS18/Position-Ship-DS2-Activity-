# -*- coding: utf-8 -*-
"""Prova-DS2.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fgnybCqqHgTYssGQLiqvmGNVUcJbOy9-
"""

#Função para arredondar o numero de dias da viagem
def NumberOfDays(Day):
  if Day==int(Day):
    return Day
  else:
    Day=int(Day)+1
    return Day
def PositionShip(LongInit,LongFinal,Speed):
  DistanceInLong= LongFinal-LongInit
  #Distancia em longitude
  DistanceInKm = DistanceInLong*111
  #Distancia em Km 
  Time = DistanceInKm/Speed
  #Tempo da viagem
  Days = Time/24
  Days=NumberOfDays(Days)
  #Dias necessários para a viagem
  DistancePerDay = (Speed * 24)
  #Distancia percorrida por dia
  DistancePerLong = DistancePerDay/111 
  #Distancia por dia em graus de longitude
  Result = list(range(NumberOfDays(Days)))
  #Gerando lista com tamanho do numero de dias da viagem
  Days=1
  #reiniciando dias para apresentar no print
  DistanciaPercorrida=LongInit
  #Definindo a contagem inicial
  for DistanceDiary in Result:
    Result[DistanceDiary] =DistanciaPercorrida + DistancePerLong
      #Acrescendo a cada resultado a distancia atual à percorrida
    print(f"No final do dia {(Days)}, a posição do navio é: {Result[DistanceDiary]:.2f} graus de longitude.")
    Days+=1
    if Result[DistanceDiary]+DistancePerLong < LongFinal:
      DistanciaPercorrida+=DistancePerLong
    else:
      Result[DistanceDiary]=LongFinal
      print(f"No final do dia {(Days)}, a posição do navio é: {LongFinal:.2f} graus de longitude.")
      break

#Testes:

PositionShip(10,210,100)
PositionShip(10,360,200)

